// <auto-generated />
using System;
using BTOnline_3.DataConnection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BTOnline_3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250716072548_Demo1")]
    partial class Demo1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BTOnline_3.Models.AllowAccessModel", b =>
                {
                    b.Property<int>("AccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccessId"));

                    b.Property<string>("AccessProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccessId");

                    b.HasIndex("RoleId");

                    b.ToTable("AllowAccessesDb");
                });

            modelBuilder.Entity("BTOnline_3.Models.InternModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CitizenIdentification")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CitizenIdentificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cvfile")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("EntranceTest")
                        .HasColumnType("real");

                    b.Property<string>("ForeignLanguage")
                        .HasColumnType("text");

                    b.Property<bool?>("FullTime")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HiddenToEnterprise")
                        .HasColumnType("boolean");

                    b.Property<string>("HowToKnowAlta")
                        .HasColumnType("text");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("bytea");

                    b.Property<string>("InternAddress")
                        .HasColumnType("text");

                    b.Property<bool?>("InternEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("InternMail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("InternMailReplace")
                        .HasColumnType("text");

                    b.Property<string>("InternName")
                        .HasColumnType("text");

                    b.Property<string>("InternPassword")
                        .HasColumnType("text");

                    b.Property<int?>("InternSpecialized")
                        .HasColumnType("integer");

                    b.Property<string>("InternStatus")
                        .HasColumnType("text");

                    b.Property<bool?>("Internable")
                        .HasColumnType("boolean");

                    b.Property<string>("Introduction")
                        .HasColumnType("text");

                    b.Property<string>("JobFields")
                        .HasColumnType("text");

                    b.Property<string>("LinkProduct")
                        .HasColumnType("text");

                    b.Property<string>("Major")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<bool?>("PasswordStatus")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReadyToWork")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RegisteredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TelephoneNum")
                        .HasColumnType("text");

                    b.Property<string>("University")
                        .HasColumnType("text");

                    b.Property<short?>("YearOfExperiences")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("InternsDb");
                });

            modelBuilder.Entity("BTOnline_3.Models.RoleModel", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("RolesDb");
                });

            modelBuilder.Entity("BTOnline_3.Models.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BTOnline_3.Models.AllowAccessModel", b =>
                {
                    b.HasOne("BTOnline_3.Models.RoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BTOnline_3.Models.UserModel", b =>
                {
                    b.HasOne("BTOnline_3.Models.RoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
